#!/bin/bash
#SBATCH --job-name=@name
#SBATCH -o output/o.%j
#SBATCH -e error/e.%j
#SBATCH --partition=standard
#SBATCH --nodes=2
#SBATCH --ntasks-per-node=128
#SBATCH --time=24:00:00
#SBATCH --qos=standard
#SBATCH --account=n02-LDNDTP1
#SBATCH --hint=nomultithread
#SBATCH --distribution=block:block

# set options
export FI_MR_CACHE_MAX_COUNT=0		# Disable memory registration cache
export CH_OUTPUT_INTERVAL=0			# Reduces the number of pout files to 1

# set paths
export WORK=/mnt/lustre/a2fs-work2/work/n02/shared/jonnieb/
export BISEXEC=$WORK/Bisicles/ocean_conn/code/exec2D/driver2d.Linux.64.CC.ftn.OPT.MPI.PETSC.GNU.ex
export BISINPT=inputs.ssp585.@name
export JOB=job.ssp585.@name

# set times
export START=2007	# start year of simulation
export END=2300		# end year of simulation
export INCR=50		# time increment per job (in years)

# load python
module load cray-python	
export PYTHONPATH=$PYTHONPATH:$WORK/Bisicles/ocean_conn/code/libamrfile/python/AMRFile # if using amrfile
export PYTHONPATH=$PYTHONPATH:`pwd` # if using python interface

# load some helpful functions
source $WORK/libs/utils.sh

start=$(date +%s)
echo Start time is `date`


# make directories
cd $SLURM_SUBMIT_DIR
mkdir -p plot chk pout output error


# update pout
echo "" >> $BISINPT
echo "main.poutBaseName = pout/pout.ssp585.$SLURM_JOB_ID" >> $BISINPT


# update last checkpoint
lastchk=$(get_latest_file chk chk.*.2d.hdf5)
if [ -n "$lastchk" ]; then
	echo "amr.restart_file = chk/$lastchk" >> "$BISINPT"
    echo "amr.restart_set_time=false" >> "$BISINPT"
fi


# update maxTime
lastplot=$(get_latest_file plot plot.*.2d.hdf5)
if [ -n "$lastplot" ]; then
	lasttime=$(python $WORK/libs/get_time.py plot/$lastplot)
else
	lasttime=$START
fi
newtime=$((lasttime + INCR))
newtime=$(min $newtime $END)
maxtime=$((newtime - START)) # offset for reading by BISICLES
echo "main.maxTime = $maxtime" >> $BISINPT


# run BISICLES
echo "running BISICLES..."
srun $BISEXEC $BISINPT
echo "BISICLES done"


# queue next job
if [ $newtime -lt $END ] && [ ! -e core ]; then
	sbatch $JOB
else
	echo "run complete!"
fi


end=$(date +%s)
echo End time is `date`
echo Time elapsed: $(time_elapsed $start $end)


